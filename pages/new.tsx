import React, { useCallback, useRef, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
// Providers
import { useDropzone } from "react-dropzone";
import { ToastContainer, toast } from "react-toastify";
import { storage } from "../firebase";
// Services
import { create } from "../services/httpRequest";
// Images
import upload from "../public/image.svg";
// Styles
import { UploadCard } from "@styles/uploadCard";
import { DragDrop } from "@styles/dragDrop";
// Components
import { Container } from "@components/container";
import { Title, Text, Button, Loading } from "@components/shared";
import { UploadCardAction } from "@components/uploadCardAction";

const New = () => {
  const [loading, setLoading] = useState(false);
  const ref = useRef<HTMLInputElement>(null);
  const router = useRouter();

  // Get the image from drop on box
  const onDrop = useCallback((acceptedFiles) => {
    if (acceptedFiles[0].size > 200000) {
      toast.warning("The file exceeds the maximum size of 200kb");
    } else {
      setLoading(true);
      const image = acceptedFiles[0];
      const uploadTask = storage.ref(`images/${image.name}`).put(image);
      uploadTask.on(
        "state_changed",
        (snapshot) => {
          const progress =
            Math.round(snapshot.bytesTransferred / snapshot.totalBytes) * 100;
        },
        (error) => console.log(error),
        () => {
          storage
            .ref("images")
            .child(image.name)
            .getDownloadURL()
            .then(async (url: string) => {
              await create("image/create", {
                name: image.name,
                image: url,
              });
              setLoading(false);
              router.push("/");
            })
            .catch((error) => console.log(error));
        }
      );
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const { getRootProps, isDragActive } = useDropzone({ onDrop });

  // Ref to the input from styled button
  const handleClickUpload = () => {
    if (ref && ref.current) {
      return ref.current.click();
    }
  };
  // Get the image from input on click styled button
  const uploadImage = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0].size) {
      if (e.target.files[0].size > 200000) {
        toast.warning("The file exceeds the maximum size of 200kb");
      } else {
        setLoading(true);
        const image = e.target.files[0];
        const uploadTask = storage.ref(`images/${image.name}`).put(image);
        uploadTask.on(
          "state_changed",
          (snapshot) => {
            const progress =
              Math.round(snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          },
          (error) => console.log(error),
          () => {
            storage
              .ref("images")
              .child(image.name)
              .getDownloadURL()
              .then(async (url) => {
                await create("image/create", {
                  name: image.name,
                  image: url,
                });
                setLoading(false);
                router.push("/");
              })
              .catch((error) => console.log(error));
          }
        );
      }
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Title text="New image" size="lg" color="#1976d2" position="center" />
        {loading ? (
          <UploadCard>
            <Title text="Uploading..." />
            <Loading />
          </UploadCard>
        ) : (
          <UploadCard {...getRootProps()}>
            <Title
              position="center"
              text="Upload your image"
              size="md"
              color="black"
            />
            <Text position="center">File should be jpeg, png,...</Text>
            {isDragActive ? (
              <DragDrop opacity={0.5}>
                <Image src={upload} alt="upload" />
                <Text position="center" color="#bbdefb">
                  Drop your image <strong>here</strong>
                </Text>
              </DragDrop>
            ) : (
              <DragDrop>
                <Image src={upload} alt="upload" />
                <Text position="center" color="#bbdefb">
                  Select an image and drop <strong>here</strong>
                </Text>
              </DragDrop>
            )}
            <Text position="center" color="black">
              or
            </Text>
            <UploadCardAction>
              <Button size="lg" color="#1976d2" onClick={handleClickUpload}>
                Choose a file
              </Button>
              <input
                type="file"
                accept=".png, .jpg, .jpeg"
                hidden
                ref={ref}
                onChange={(e) => uploadImage(e)}
              />
            </UploadCardAction>
            <UploadCardAction>
              <Link href="/">
                <a>Back to list</a>
              </Link>
            </UploadCardAction>
          </UploadCard>
        )}
        <ToastContainer autoClose={2000} theme="dark" />
      </Container>
    </div>
  );
};

export default New;
